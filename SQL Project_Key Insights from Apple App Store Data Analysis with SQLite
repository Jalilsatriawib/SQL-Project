
-- COMBINE THE DATA
create table appleStore_description_combined AS
select * from appleStore_description1
UNION all
select * from appleStore_description2
UNION ALL
select * from appleStore_description3
UNION all
select * from appleStore_description4;

**EXPLORATORY DATA ANALYSIS**
-- check the number of unique qpps in both tables
select count(distinct id) AS UniqueAppIDs
FROM AppleStore

select count(distinct id) AS UniqueAppIDs
FROM appleStore_description_combined
-- Same number = no issue missing data

-- Check for any missing values in key fields
SELECT COUNT(*) as MissingValues
from AppleStore
WHERE track_name is null or user_rating is null or prime_genre is NULL

SELECT COUNT(*) as MissingValues
from appleStore_description_combined
WHERE app_desc is null

--Find out the number of app per genreAppleStore
select prime_genre, count(*) as app_numbers
FROM AppleStore
GROUP by prime_genre
order by app_numbers desc

--Get an overview of the apps' ratings
SELECT	min(user_rating) as Min_Rating,
		max(user_rating) as Max_Rating,
        avg(user_rating) as Average_Rating
FROM AppleStore

-- Get the distribution of app prices
SELECT
	(price / 2) * 2 as PriceBinStart,
    ((price / 2) * 2) + 2 as PriceBinEnd,
    count(*) as NumApps
FROM AppleStore
GROUP by PriceBinStart
OrDER by PriceBinStart

**DATA ANALYSIS**
--Determine whether paid apps have higher ratings than free apps
select CASE
			when price > 0 then "Paid"
            else "Free"
       end as App_type,
       avg(user_rating) as Average_Rating
from AppleStore
GROUP by App_type

--Check if app with more supported languages have higher ratings
SELECT Case
			when lang_num < 10 then "<10 languages"
            when lang_num BETWEEN 10 and 30 then "10-30 languages"
            else ">30 languages"
       end as language_bucket,
       avg(user_rating) as average_rating
from AppleStore
GROUP by language_bucket
order by average_rating desc

--Check genres with low ratings
SELECT prime_genre,
       avg(user_rating) as average_rating
from AppleStore
GROUP by prime_genre
order BY average_rating asc
limit 10

--Check if there is correlation between the lenght of the app description and the user rating
SELECT case
			when length(b.app_desc) < 500 then "short_description"
            when length(b.app_desc) BETWEEN 500 and 1000 then "medium_description"
            else "long_description"
       end as lenght_description,
       avg(user_rating) as average_rating
from AppleStore as a
join appleStore_description_combined as b
on a.id = b.id
GROUP by lenght_description
order BY average_rating asc

--Check the top-rated apps for each genre
SELECT prime_genre,
       track_name,
       user_rating,
       rating_count_tot
from AppleStore
ORDER by user_rating desc, rating_count_tot DESC

--Check the top-rated apps for each genre
SELECT prime_genre,
       track_name,
       user_rating,
       rating_count_tot
from (
  	SELECT 	prime_genre,
       		track_name,
       		user_rating,
  			rating_count_tot,
  			rank() over(partition by prime_genre order by user_rating DESC, rating_count_tot desc) as rank
	from AppleStore
  ) as a
where a.rank = 1
